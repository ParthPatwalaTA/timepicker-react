{"version":3,"sources":["timepicker/TimeInput.js","timepicker/Helper.js","timepicker/Timepicker.js","App.js","serviceWorker.js","index.js"],"names":["TimeInput","_ref","focused","placeholder","value","disabled","showInput","onChange","onkeypress","react_default","a","createElement","className","type","name","e","onFocus","onKeyPress","maxLength","onClick","checkTimeFrame","date","timeFrameObj","minHours","minMinutes","maxHours","maxMinutes","tempDate","Date","startDate","getFullYear","getMonth","getDate","endDate","Timepicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","moment","format","steps","undefined","oldTime","defaultValue","timeList","_this2","createTimeList","window","addEventListener","onWindowClick","updateState","stateObj","currDate","setState","target","nodeName","newDate","parseInt","loopLength","i","setMinutes","push","_this3","onTimeUpdate","_this4","dateText","_this5","key","test","concat","_this6","timeArr","timepicker_TimeInput","length","map","data","index","setTime","Component","App","time","console","log","src_timepicker_Timepicker","onTimeChange","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66d6f7e7.chunk.js","sourcesContent":["import React from 'react';\n\nconst TimeInput = ({\n    focused,\n    placeholder,\n    value,\n    disabled,\n    showInput,\n    onChange,\n    onkeypress\n  }) => {\n  return (\n    <div className={(focused) ? 'time-picker-input focused' : 'time-picker-input'}>\n        <input \n            type=\"text\"\n            name=\"timepicker\"\n            value={value}\n            placeholder={placeholder}\n            onChange={(e) => onChange(e)}\n            disabled={(disabled) ? true : false}\n            onFocus={() => { showInput() }}\n            onKeyPress= {e => onkeypress(e) }\n            maxLength=\"5\"\n            onClick={() => { showInput() }}\n        />\n    </div>\n  )\n}\n\nexport default TimeInput;","// Validate time input\nexport function validateTime(timeStr) {\n    var time = timeStr;\n    var isValid = /^([0-1][0-9]|2[0-3]):([0-5][0-9])$/.test(time);\n\n    return isValid;\n}\n\nexport function checkTimeFrame(date, timeFrameObj) {\n\n    let isValid = true;\n    let { minHours, minMinutes, maxHours, maxMinutes} = timeFrameObj;\n\n    let tempDate = new Date();\n    // Create a new Date\n    let startDate = new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate(), minHours, minMinutes, 0);\n    let endDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), maxHours, maxMinutes, 0);\n\n    if (date >= startDate &&  date <= endDate) {\n        isValid = true;\n    } else {\n        isValid = false;\n    }\n    \n    return isValid;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport './Timepicker.css';\nimport TimeInput from './TimeInput';\nimport {validateTime, checkTimeFrame} from './Helper';\n\nclass Timepicker extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: moment().format('HH:mm'),\n      placeholder: 'Enter Time',\n      disabled: false,\n      steps: 30,\n      minHours: (this.props.minHours !== undefined) ? this.props.minHours : 0,\n      minMinutes: (this.props.minMinutes !== undefined) ? this.props.minMinutes : 0,\n      maxHours: (this.props.maxHours !== undefined) ? this.props.maxHours : 23,\n      maxMinutes: (this.props.maxMinutes !== undefined) ? this.props.maxMinutes : 59,\n      showInput: false,\n      oldTime: (this.props.defaultValue !== undefined) ? this.props.defaultValue : new Date(),\n      timeList: [],\n    }\n  }\n\n  componentDidMount() {\n    this.createTimeList();\n    window.addEventListener(\"click\", (e) => { this.onWindowClick(e); });\n    this.updateState();\n  }\n\n  // Update State Based on values\n  updateState() {\n    let stateObj = {};\n\n    let currDate = this.props.defaultValue;\n    let placeholder = this.props.placeholder;\n    let disabled = this.props.disabled;\n    let steps = this.props.steps;\n    let minHours = this.props.minHours;\n    let minMinutes = this.props.minMinutes;\n    let maxHours = this.props.maxHours;\n    let maxMinutes = this.props.maxMinutes;\n    let oldTime = this.props.defaultValue;\n\n    // Check Passed Date\n    if (currDate !== undefined) {\n      if (new Date(currDate) !== 'Invalid Date') {\n        stateObj['currDate'] = moment(currDate).format('HH:mm');\n        stateObj['oldTime'] = oldTime;\n      } else {\n        stateObj['currDate'] = moment().format('HH:mm');;\n        stateObj['oldTime'] = new Date();\n      }\n    }\n\n    // Check Passed Placeholder\n    if (placeholder !== undefined) {\n      stateObj['placeholder'] = placeholder;\n    }\n    // Check disabled\n    if (disabled !== undefined) {\n      stateObj['disabled'] = disabled;\n    }\n    // Steps \n    if (steps !== undefined) {\n      if (steps !== 15 && steps !== 30 && steps !== 60) {\n        stateObj['steps'] = 30;\n      } else {\n        stateObj['steps'] = steps;\n      }\n    }\n    // Set Min Hours\n    if (minHours !== undefined) {\n      if (minHours < 0 || minHours > 23) {\n        stateObj['minHours'] = 0;\n      } else {\n        stateObj['minHours'] = minHours;\n      }\n    }\n    // Set Min Minutes\n    if (minMinutes !== undefined) {\n      if (minMinutes < 0 || minMinutes > 59) {\n        stateObj['minMinutes'] = 0;\n      } else {\n        stateObj['minMinutes'] = minMinutes;\n      }\n    }\n    // Set Min Hours\n    if (maxHours !== undefined) {\n      if (maxHours < 0 || maxHours > 23) {\n        stateObj['maxHours'] = 0;\n      } else {\n        stateObj['maxHours'] = maxHours;\n      }\n    }\n    // Set Max Minutes\n    if (maxMinutes !== undefined) {\n      if (maxMinutes < 0 || maxMinutes > 59) {\n        stateObj['maxMinutes'] = 0;\n      } else {\n        stateObj['maxMinutes'] = maxMinutes;\n      }\n    }\n\n    this.setState(stateObj);\n  }\n\n  // Close timepicker on window click\n  onWindowClick(e) {\n    if (e.target.nodeName !== 'INPUT' && e.target.nodeName !== 'SPAN') {\n      this.setState({ showInput: false });\n    }\n  }\n\n  // Create Time List\n  createTimeList() {\n    let date = new Date();\n    // Create a new Date\n    let newDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n    let steps = parseInt(this.state.steps);\n    let loopLength = 0;\n\n    // Set Loop value for Steps\n    if (steps === 60) {\n      loopLength = 24;\n    } else if (steps === 30) {\n      loopLength = (24 * 2);\n    } else if (steps === 15) {\n      loopLength = (24 * 4);\n    }\n\n    let timeList = [];\n    // Time Frame Obj \n    let timeFrameObj = {\n      minHours: this.state.minHours,\n      minMinutes: this.state.minMinutes,\n      maxHours: this.state.maxHours,\n      maxMinutes: this.state.maxMinutes,\n    }\n\n    // Generate new Time List Array\n    for (let i=0; i< loopLength; i++) {\n      let tempDate = new Date(newDate);\n      tempDate.setMinutes((i * steps));\n      // Check time Frame\n      if (checkTimeFrame(tempDate, timeFrameObj)) {\n        timeList.push(tempDate);\n      }\n    }\n    this.setState({ timeList: timeList });\n  }\n\n  // On Time Change Function\n  onTimeChange(e) {\n    let value = e.target.value;\n    this.setState({ value: e.target.value }, () => {\n      this.props.onTimeUpdate(value);\n    });\n  }\n\n  // Set Time on Time Click\n  setTime(date) {\n    let dateText = moment(date).format('HH:mm');\n    this.setState({ value: dateText, oldTime: date, showInput: false }, () => {\n        this.props.onTimeUpdate(date);\n    });\n  }\n\n  // On Change Event\n  onChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  // on Text input focus\n  showInput() {\n    this.setState({ showInput: true });\n  }\n\n  // On Enter Set new Date\n  onkeypress(e) {\n    if (e.key === 'Enter') {\n      let value = e.target.value;\n      let date = new Date();\n      let newDate;\n      // Create a new Date\n      if (validateTime(value)) {\n        newDate = new Date(`${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${value}:00`);\n      } else {\n        newDate = this.state.oldTime;\n      }\n      // Set Final Date\n      let dateText = moment(newDate).format('HH:mm');\n      this.setState({ value: dateText, oldTime: newDate, showInput: false }, () => {\n          this.props.onTimeUpdate(newDate);\n      });\n    }\n  }\n\n  render() {\n    let value = this.state.value;\n    let placeholder = this.state.placeholder;\n    let disabled = this.state.disabled;\n    let timeArr = this.state.timeList;\n    let focused = this.state.showInput;\n\n    return (\n      <div className=\"react-custom-time-picker\">\n          <TimeInput\n              focused={focused}\n              placeholder={placeholder}\n              value={value}\n              disabled={disabled}\n              showInput={() => this.showInput() }\n              onChange= {(e) => this.onChange(e)}\n              onkeypress= {e => this.onkeypress(e)}\n          />\n          {this.state.showInput && \n            <div className=\"time-component\">\n              <div className=\"component-card\">\n                {timeArr.length > 0 && timeArr.map((data, index) => \n                  <div className=\"card-item\" key={`time${index}`} onClick={() => this.setTime(data)}>\n                    <span className=\"item-value\">{moment(data).format('HH:mm')}</span>\n                  </div> \n                )}\n              </div>\n            </div>\n          }\n      </div>\n    );\n  }\n}\n\nTimepicker.propTypes = {\n  onTimeUpdate: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  disabled: PropTypes.bool,\n  steps: PropTypes.number,\n  minHours: PropTypes.number,\n  minMinutes: PropTypes.number,\n  maxHours: PropTypes.number,\n  maxMinutes: PropTypes.number,\n  showInput: PropTypes.bool,\n  oldTime: PropTypes.instanceOf(Date),\n};\n\nexport default Timepicker;","import React, { Component } from 'react';\nimport './App.css';\nimport Timepicker from './timepicker/Timepicker';\n\nclass App extends Component {\n\n  constructor() {\n      super();\n      this.state = {\n        time: new Date()\n      }\n  }\n\n  onTimeChange(value) {\n    console.log(value);\n  }\n\n  render() {\n    return (\n      <div>\n        <Timepicker\n          defaultValue={this.state.time}\n          onTimeUpdate= {(e) => this.onTimeChange(e)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}